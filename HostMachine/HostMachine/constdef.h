#pragma once

static const char *c_sHostMachine = "HostMachine";
static const char *c_sTitle = QT_TRANSLATE_NOOP("HostMachine", "网络应用软件");

// 系统菜单
static const char *c_sIPSetting = QT_TRANSLATE_NOOP("HostMachine", "IP设置");
static const char *c_sSystemConfig = QT_TRANSLATE_NOOP("HostMachine", "系统配置");
static const char *c_sSystemOperation = QT_TRANSLATE_NOOP("HostMachine", "系统操作");
static const char *c_sAbout = QT_TRANSLATE_NOOP("HostMachine", "关于");

// 工具栏
static const char *c_sCheckSelf = QT_TRANSLATE_NOOP("HostMachine", "自检");
static const char *c_sFormat = QT_TRANSLATE_NOOP("HostMachine", "格式化");
static const char *c_sImport = QT_TRANSLATE_NOOP("HostMachine", "导入");
static const char *c_sExport = QT_TRANSLATE_NOOP("HostMachine", "导出");
static const char *c_sRecord = QT_TRANSLATE_NOOP("HostMachine", "记录");
static const char *c_sDelete = QT_TRANSLATE_NOOP("HostMachine", "删除");
static const char *c_sRefresh = QT_TRANSLATE_NOOP("HostMachine", "刷新");
static const char *c_sPlayback = QT_TRANSLATE_NOOP("HostMachine", "回放");
static const char *c_sStop = QT_TRANSLATE_NOOP("HostMachine", "停止");

// 状态栏
static const char *c_sDisConnect = QT_TRANSLATE_NOOP("HostMachine", "未连接");
static const char *c_sReady = QT_TRANSLATE_NOOP("HostMachine", "就绪");
static const char *c_sContactUs = QT_TRANSLATE_NOOP("HostMachine", "联系我们");

// 文件列表框 - 雷达数据
static const char *c_sFileNo = QT_TRANSLATE_NOOP("HostMachine", "文件编号");
static const char *c_sLDData = QT_TRANSLATE_NOOP("HostMachine", "雷达数据");
static const char *c_sLDHeader1_1 = QT_TRANSLATE_NOOP("HostMachine", "原始数据区文件编号");
static const char *c_sLDHeader1_2 = QT_TRANSLATE_NOOP("HostMachine", "雷达图片区文件编号");
static const char *c_sFileSize = QT_TRANSLATE_NOOP("HostMachine", "文件大小");
static const char *c_sCreateDate = QT_TRANSLATE_NOOP("HostMachine", "创建时间");
static const char *c_sFileType = QT_TRANSLATE_NOOP("HostMachine", "文件类型");
static const char *c_sLBASize = QT_TRANSLATE_NOOP("HostMachine", "LBA大小（KB）");


// 文件列表框 - 光电数据
static const char *c_sGDData = QT_TRANSLATE_NOOP("HostMachine", "光电数据");
static const char *c_sGDHeader1_1 = QT_TRANSLATE_NOOP("HostMachine", "光电图片区文件编号");
static const char *c_sGDHeader1_2 = QT_TRANSLATE_NOOP("HostMachine", "光电视频区文件编号");
static const char *c_sGDHeader2 = QT_TRANSLATE_NOOP("HostMachine", "文件名称");
static const char *c_sGDHeader3 = QT_TRANSLATE_NOOP("HostMachine", "文件大小");
static const char *c_sGDHeader4 = QT_TRANSLATE_NOOP("HostMachine", "创建时间");

// 文件列表框 - 混合数据
static const char *c_sHHData = QT_TRANSLATE_NOOP("HostMachine", "混合数据");
static const char *c_sHHHeader1 = QT_TRANSLATE_NOOP("HostMachine", "融合图片区文件编号");
static const char *c_sHHHeader2 = QT_TRANSLATE_NOOP("HostMachine", "文件名称");
static const char *c_sHHHeader3 = QT_TRANSLATE_NOOP("HostMachine", "文件大小");
static const char *c_sHHHeader4 = QT_TRANSLATE_NOOP("HostMachine", "创建时间");

// 日志输出框
static const char *c_sLogHeader1 = QT_TRANSLATE_NOOP("HostMachine", "操作时间");
static const char *c_sLogHeader2 = QT_TRANSLATE_NOOP("HostMachine", "系统信息");
static const char *c_sLogOpenSoftware = QT_TRANSLATE_NOOP("HostMachine", "打开软件");

// 任务列表框
static const char *c_sTaskHeader1 = QT_TRANSLATE_NOOP("HostMachine", "序号");
static const char *c_sTaskHeader2 = QT_TRANSLATE_NOOP("HostMachine", "所属分区");
static const char *c_sTaskHeader3 = QT_TRANSLATE_NOOP("HostMachine", "任务类型");
static const char *c_sTaskHeader4 = QT_TRANSLATE_NOOP("HostMachine", "任务开始时间");
static const char *c_sTaskHeader5 = QT_TRANSLATE_NOOP("HostMachine", "总大小(GB)");
static const char *c_sTaskHeader6 = QT_TRANSLATE_NOOP("HostMachine", "已完成大小(GB)");
static const char *c_sTaskHeader7 = QT_TRANSLATE_NOOP("HostMachine", "百分比");
static const char *c_sTaskHeader8 = QT_TRANSLATE_NOOP("HostMachine", "速率(MB/S)");
static const char *c_sTaskHeader9 = QT_TRANSLATE_NOOP("HostMachine", "状态");
static const char *c_sTaskHeader10 = QT_TRANSLATE_NOOP("HostMachine", "耗时");

// 属性区
static const char *c_sPropertyTitle1 = QT_TRANSLATE_NOOP("HostMachine", "磁盘控制面板");
static const char *c_sPropertyGroup1_1 = QT_TRANSLATE_NOOP("HostMachine", "原始数据分区");
static const char *c_sPropertyGroup1_2 = QT_TRANSLATE_NOOP("HostMachine", "雷达结果分区");
static const char *c_sPropertyGroup1_3 = QT_TRANSLATE_NOOP("HostMachine", "光电图片分区");
static const char *c_sPropertyGroup1_4 = QT_TRANSLATE_NOOP("HostMachine", "光电视频分区");
static const char *c_sPropertyGroup1_5 = QT_TRANSLATE_NOOP("HostMachine", "混合数据分区");
static const char *c_sPropertyGroup1_6 = QT_TRANSLATE_NOOP("HostMachine", "参数信息");
static const char *c_sProperty1_1 = QT_TRANSLATE_NOOP("HostMachine", "总大小");
static const char *c_sProperty1_2 = QT_TRANSLATE_NOOP("HostMachine", "已用大小");
static const char *c_sProperty1_3 = QT_TRANSLATE_NOOP("HostMachine", "未用百分比");
static const char *c_sProperty1_4 = QT_TRANSLATE_NOOP("HostMachine", "文件数量");
static const char *c_sProperty1_5 = QT_TRANSLATE_NOOP("HostMachine", "当前状态");
static const char *c_sProperty1_6 = QT_TRANSLATE_NOOP("HostMachine", "通道连接状态");
static const char *c_sProperty1_7 = QT_TRANSLATE_NOOP("HostMachine", "通道选择状态");
static const char *c_sProperty1_8 = QT_TRANSLATE_NOOP("HostMachine", "通道带宽");
static const char *c_sPropertyTitle2 = QT_TRANSLATE_NOOP("HostMachine", "基本参数");
static const char *c_sPropertyGroup2_1 = QT_TRANSLATE_NOOP("HostMachine", "导出参数");
static const char *c_sPropertyGroup2_2 = QT_TRANSLATE_NOOP("HostMachine", "回放参数");
static const char *c_sProperty2_1 = QT_TRANSLATE_NOOP("HostMachine", "所属分区");
static const char *c_sProperty2_2 = QT_TRANSLATE_NOOP("HostMachine", "记录文件名");
static const char *c_sProperty2_3 = QT_TRANSLATE_NOOP("HostMachine", "导出路径");
static const char *c_sProperty2_4 = QT_TRANSLATE_NOOP("HostMachine", "文件编号");
static const char *c_sProperty2_5 = QT_TRANSLATE_NOOP("HostMachine", "原始文件大小");
static const char *c_sProperty2_6 = QT_TRANSLATE_NOOP("HostMachine", "文件偏移");
static const char *c_sProperty2_7 = QT_TRANSLATE_NOOP("HostMachine", "导出文件大小");
static const char *c_sProperty2_8 = QT_TRANSLATE_NOOP("HostMachine", "文件编号");
static const char *c_sProperty2_9 = QT_TRANSLATE_NOOP("HostMachine", "PRF_TIME(us)");
static const char *c_sProperty2_10 = QT_TRANSLATE_NOOP("HostMachine", "NUM");
static const char *c_sProperty2_11 = QT_TRANSLATE_NOOP("HostMachine", "HEAD_PRF(H)");
static const char *c_sProperty2_12 = QT_TRANSLATE_NOOP("HostMachine", "HEAD_CPI(H)");
static const char *c_sConfirm = QT_TRANSLATE_NOOP("HostMachine", "确定");
static const char *c_sCancel = QT_TRANSLATE_NOOP("HostMachine", "取消");

// 分区状态
static const char *c_sAreaState0 = QT_TRANSLATE_NOOP("HostMachine", "空闲");
static const char *c_sAreaState1 = QT_TRANSLATE_NOOP("HostMachine", "读");
static const char *c_sAreaState2 = QT_TRANSLATE_NOOP("HostMachine", "写");
static const char *c_sAreaState3 = QT_TRANSLATE_NOOP("HostMachine", "读写");

// 通道状态
static const char *c_sChannelState0 = QT_TRANSLATE_NOOP("HostMachine", "未连接");
static const char *c_sChannelState1 = QT_TRANSLATE_NOOP("HostMachine", "连接");

// 通道选择
static const char *c_sChannelChoice0 = QT_TRANSLATE_NOOP("HostMachine", "选择");
static const char *c_sChannelChoice1 = QT_TRANSLATE_NOOP("HostMachine", "未选择");

using namespace std;
#include <QDateTime>
class QtProperty;
// 请求类型
enum RequestType
{
    CS_CheckSelf = 0x11,    // 自检
    CS_Format = 0xA1,       // 格式化
    CS_SystemConfig = 0xB1, // 系统配置
    CS_Record = 0x21,       // 记录
    CS_PlayBack = 0x31,     // 回放
    CS_Import = 0x41,       // 导入
    CS_Export = 0x51,       // 导出
    CS_Stop = 0x61,         // 停止
    CS_Delete = 0x71,       // 删除
    CS_Refresh = 0x81,      // 刷新
    CS_TaskQuery = 0x91,    // 任务查询
    CS_TaskStop = 0xC1,     // 任务停止
};

// 应答类型
enum RespondType
{
    SC_CheckSelf = 0x1011,      // 自检
    SC_Format = 0x10A1,         // 格式化
    SC_SystemConfig = 0x10B1,   // 系统配置
    SC_Record = 0x1021,         // 记录
    SC_PlayBack = 0x1031,       // 回放
    SC_Import = 0x1041,         // 导入
    SC_Export = 0x1051,         // 导出
    SC_Stop = 0x1061,           // 停止
    SC_Delete = 0x1071,         // 删除
    SC_Refresh = 0x1081,        // 刷新
    SC_TaskQuery = 0x1091,      // 任务查询
    SC_TaskStop = 0x10C1,       // 任务停止
};

// 任务查询应答-任务信息
struct tagTaskInfo
{
    quint32 flag; // 标记 1-有效任务 0-无效任务
    quint32 area; // 分区 0-0分区 1-1分区
    quint32 type; // 任务类型 0-数据0 1-数据1 2-导入导出 3-回放
    quint32 finishedsize; // 任务已完成大小
    quint32 speed; // 任务速度
    quint32 percent; // 任务进度百分比
    quint32 state; // 任务状态 0-等待执行 1-执行中 2-已完成

    tagTaskInfo()
    {

    }
};

// 分区信息
struct tagAreaInfo
{
    quint32 area;
    quint32 areasize;
    quint32 areaunuse;
    quint32 areafilenum;
    quint32 areastate;

    tagAreaInfo()
    {

    }

    void read(QDataStream& in)
    {
        in >> area
            >> areasize
            >> areaunuse
            >> areafilenum
            >> areastate;
    }
};

// 通道信息
struct tagChannelInfo
{
    quint32 state;
    quint32 choice;
    quint32 bandwidth;
    quint32 hardversion;
    quint32 fpgaversion;

    tagChannelInfo()
    {

    }

    void read(QDataStream& in)
    {
        in>> state
            >> choice
            >> bandwidth
            >> hardversion
            >> fpgaversion;
    }
};

// 自检应答-自检信息
struct tagCheckSelf
{
    shared_ptr<tagAreaInfo> areaInfo0, areaInfo1, areaInfo2, areaInfo3, areaInfo4;
    shared_ptr<tagChannelInfo> channelInfo;

    tagCheckSelf()
    {

    }
};

// 分区属性
struct tagAreaProperty
{
    QtProperty* pItem1;
    QtProperty* pItem2;
    QtProperty* pItem3;
    QtProperty* pItem4;
    QtProperty* pItem5;

    tagAreaProperty()
    {

    }
};

// 通道属性
struct tagChannelProperty
{
    QtProperty* pItem1;
    QtProperty* pItem2;
    QtProperty* pItem3;

    tagChannelProperty()
    {

    }
};

// 界面显示：磁盘控制面板
struct tagAreaProperties
{
    shared_ptr<tagAreaProperty> ldProperty1;    // 原始数据分区
    shared_ptr<tagAreaProperty> ldProperty2;    // 雷达结果分区
    shared_ptr<tagAreaProperty> gdProperty1;    // 光电图片分区
    shared_ptr<tagAreaProperty> gdProperty2;    // 光电视频分区
    shared_ptr<tagAreaProperty> hhProperty;     // 混合数据分区
    shared_ptr<tagChannelProperty> channelProperty; // 参数信息

    tagAreaProperties()
    {

    }
};

// 刷新 - 文件信息
struct tagAreaFileInfo
{
    quint32 fileno;     // 文件编号
    QString sFileName;  // 文件名称
    float filesize;     // 文件大小
    QDateTime datetime; // 创建时间

    tagAreaFileInfo()
    {

    }
};

// 刷新 - 文件信息
struct tagAreaFileInfos
{
    quint32 areano;     // 分区号
    quint32 fileno;     // 起始文件编号
    quint32 filenum;    // 文件数
    list<shared_ptr<tagAreaFileInfo>> lstFileInfo;
    tagAreaFileInfos()
    {

    }
};